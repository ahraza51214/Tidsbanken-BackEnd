// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tidsbanken_BackEnd.Data;

#nullable disable

namespace Tidsbanken_BackEnd.Migrations
{
    [DbContext(typeof(TidsbankenDbContext))]
    [Migration("20231023040841_InitialTidsbankenDb")]
    partial class InitialTidsbankenDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StatusAtTimeOfComment")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VacationRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacationRequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCommented = new DateTime(2023, 10, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5800),
                            Message = "This is a comment by John.",
                            StatusAtTimeOfComment = 0,
                            VacationRequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCommented = new DateTime(2023, 10, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5800),
                            Message = "This is a comment by Manager.",
                            StatusAtTimeOfComment = 2,
                            VacationRequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCommented = new DateTime(2023, 10, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5810),
                            Message = "Another comment by Manager.",
                            StatusAtTimeOfComment = 0,
                            VacationRequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCommented = new DateTime(2023, 10, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5810),
                            Message = "A comment by Admin.",
                            StatusAtTimeOfComment = 2,
                            VacationRequestId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCommented = new DateTime(2023, 10, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5810),
                            Message = "A comment by Jane.",
                            StatusAtTimeOfComment = 0,
                            VacationRequestId = 5
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.IneligiblePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IneligiblePeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Vacation blackout period 1",
                            EndDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86")
                        },
                        new
                        {
                            Id = 2,
                            Description = "Vacation blackout period 2",
                            EndDate = new DateTime(2024, 3, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2024, 2, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86")
                        },
                        new
                        {
                            Id = 3,
                            Description = "Vacation blackout period 3",
                            EndDate = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2024, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86")
                        },
                        new
                        {
                            Id = 4,
                            Description = "Vacation blackout period 4",
                            EndDate = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86")
                        },
                        new
                        {
                            Id = 5,
                            Description = "Vacation blackout period 5",
                            EndDate = new DateTime(2023, 11, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86")
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86"),
                            Email = "admin@admin.dk",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("7d94f7d7-da61-49a0-b0e3-8790b93168de"),
                            Email = "employee@employee.dk",
                            FirstName = "Employee",
                            LastName = "Employee",
                            Username = "employee"
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("UserId");

                    b.ToTable("VacationRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 10, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 10, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5540),
                            StartDate = new DateTime(2023, 10, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            UserId = new Guid("7d94f7d7-da61-49a0-b0e3-8790b93168de"),
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 12, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 11, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5550),
                            StartDate = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Approved",
                            UserId = new Guid("7d94f7d7-da61-49a0-b0e3-8790b93168de"),
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 12, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5560),
                            StartDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86"),
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 12, 8, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5570),
                            StartDate = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Approved",
                            UserId = new Guid("6786c233-5f89-4e5e-af84-2ff7db03ba86"),
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2024, 1, 23, 6, 8, 41, 613, DateTimeKind.Local).AddTicks(5580),
                            StartDate = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            UserId = new Guid("7d94f7d7-da61-49a0-b0e3-8790b93168de"),
                            VacationType = "Vacation"
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.Comment", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.VacationRequest", "VacationRequest")
                        .WithMany("Comments")
                        .HasForeignKey("VacationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VacationRequest");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.IneligiblePeriod", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", "User")
                        .WithMany("IneligiblePeriods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.VacationRequest", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", "User")
                        .WithMany("VacationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IneligiblePeriods");

                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.VacationRequest", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
