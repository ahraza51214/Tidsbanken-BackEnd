// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tidsbanken_BackEnd.Data;

#nullable disable

namespace Tidsbanken_BackEnd.Migrations
{
    [DbContext(typeof(TidsbankenDbContext))]
    [Migration("20231013124022_InitialTidsbankenDb")]
    partial class InitialTidsbankenDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StatusAtTimeOfComment")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VacationRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacationRequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCommented = new DateTime(2023, 10, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4250),
                            Message = "This is a comment by John.",
                            StatusAtTimeOfComment = 0,
                            VacationRequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCommented = new DateTime(2023, 10, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4260),
                            Message = "This is a comment by Manager.",
                            StatusAtTimeOfComment = 2,
                            VacationRequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCommented = new DateTime(2023, 10, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4260),
                            Message = "Another comment by Manager.",
                            StatusAtTimeOfComment = 0,
                            VacationRequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCommented = new DateTime(2023, 10, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4260),
                            Message = "A comment by Admin.",
                            StatusAtTimeOfComment = 2,
                            VacationRequestId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCommented = new DateTime(2023, 10, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4270),
                            Message = "A comment by Jane.",
                            StatusAtTimeOfComment = 0,
                            VacationRequestId = 5
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.IneligiblePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IneligiblePeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Vacation blackout period 1",
                            EndDate = new DateTime(2023, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "Vacation blackout period 2",
                            EndDate = new DateTime(2024, 3, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2024, 2, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Description = "Vacation blackout period 3",
                            EndDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Vacation blackout period 4",
                            EndDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Vacation blackout period 5",
                            EndDate = new DateTime(2023, 11, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Employee"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Manager"
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "hashed_password1",
                            RoleId = 1,
                            Username = "employee1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "hashed_password2",
                            RoleId = 1,
                            Username = "employee2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "hashed_password3",
                            RoleId = 2,
                            Username = "admin1"
                        },
                        new
                        {
                            Id = 4,
                            Email = "manager@example.com",
                            FirstName = "Manager",
                            LastName = "Manager",
                            Password = "hashed_password4",
                            RoleId = 3,
                            Username = "manager1"
                        },
                        new
                        {
                            Id = 5,
                            Email = "sarah.johnson@example.com",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            Password = "hashed_password5",
                            RoleId = 1,
                            Username = "employee3"
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("UserId");

                    b.ToTable("VacationRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 10, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 10, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4130),
                            StartDate = new DateTime(2023, 10, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            UserId = 1,
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 11, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 11, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4150),
                            StartDate = new DateTime(2023, 11, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Approved",
                            UserId = 2,
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 12, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4150),
                            StartDate = new DateTime(2023, 12, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            UserId = 3,
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 12, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2023, 11, 28, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4160),
                            StartDate = new DateTime(2023, 11, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Approved",
                            UserId = 4,
                            VacationType = "Vacation"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            RequestDate = new DateTime(2024, 1, 13, 14, 40, 22, 760, DateTimeKind.Local).AddTicks(4170),
                            StartDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            UserId = 5,
                            VacationType = "Vacation"
                        });
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.Comment", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.VacationRequest", "VacationRequest")
                        .WithMany("Comments")
                        .HasForeignKey("VacationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VacationRequest");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.IneligiblePeriod", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", "User")
                        .WithMany("IneligiblePeriods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.User", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.VacationRequest", b =>
                {
                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("Tidsbanken_BackEnd.Data.Entities.User", "User")
                        .WithMany("VacationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IneligiblePeriods");

                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("Tidsbanken_BackEnd.Data.Entities.VacationRequest", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
